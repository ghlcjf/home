package com.green.dao;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;

import com.green.dto.MemberDto;

import java.sql.PreparedStatement;

public class MemberDao {
	// 데이터 베이스 연동을 위한 클래스
	// 기능 클래스이므로 싱글턴 패턴 사용
	
	// 기본 생성자 private
	private MemberDao() {}
	
	// private static dao 인스턴스 생성
	private static MemberDao dao = new MemberDao();
	
	
	// 인스턴스를 리턴하는 메서드
	public static MemberDao getInstance() {
		return dao;
	}
	
	//====================================================================
	
	// 연결 객체 만드는 메서드 : DBCP(커넥션풀)안쓰고
	
	
	public Connection getConnection() throws Exception {
		
		Class.forName("oracle.jdbc.OracleDriver");
		Connection conn = DriverManager.getConnection(
				"jdbc:oracle:thin:@localhost:1521:XE",
				"GREEN",
				"1234");
		return conn;
	}

	public int userCheck(String userid, String userpw) {
		// LoginServlet에서 넘겨받은 id와 pw를 통해 인증 여부를 처리하는 메서드
		// 데이터베이스와 연결
		int result = -1;
		
		String sql = "SELECT userpw FROM members WHERE userid=?";
		
		Connection conn = null;
		PreparedStatement psmt = null;
		ResultSet rs = null;
		
		try {
			conn = getConnection();
			psmt = conn.prepareStatement(sql);
			
			psmt.setString(1, userid);
			
			rs = psmt.executeQuery();
			
			if(rs.next()) {
				if(rs.getString("userpw")!=null && rs.getString("userpw").equals(userpw)) {
					result = 1; // 로그인 성공
				}else {
					result = 0; // 비밀번호가 null이거나 일치하지 않는 경우
				}
			}else {
				result = -1; // 아이디 자체를 찾을 수 없는 경우
			}
			
		}catch(Exception e) {
			
		}finally {
			try {
				if(rs!=null) {rs.close();}
				if(psmt!=null) {psmt.close();}
				if(conn!=null) {conn.close();}
				
			}catch(Exception e) {
				
			}
		}
		
		return result;
	}

	public MemberDto getMember(String userid) {
		// userid를 가지고 해당 멤버의 정보를 읽어오기 위한 메서드
		
		MemberDto mto = null;
		
		String sql = "SELECT * FROM members WHERE userid=?";
		
		Connection conn = null;
		PreparedStatement psmt = null;
		ResultSet rs = null;
		
		try {
			conn = getConnection();
			psmt = conn.prepareStatement(sql);
			
			psmt.setString(1, userid);
			
			rs = psmt.executeQuery();
			
			if(rs.next()) {
				mto = new MemberDto();
				mto.setName(rs.getString("name"));
				mto.setUserid(rs.getString("userid"));
				mto.setUserpw(rs.getString("userpw"));
				mto.setEmail(rs.getString("email"));
				mto.setPhone(rs.getString("phone"));
				mto.setAdmin(rs.getInt("admin"));
			}
		}catch(Exception e) {
			
		}finally {
			try {
				if(rs!=null) {rs.close();}
				if(psmt!=null) {psmt.close();}
				if(conn!=null) {conn.close();}
				
			}catch(Exception e) {
				
			}
		}
		
		return mto;
	}

	public int insertMember(MemberDto mto) {
		// 입력한 회원 정보를 받아와서 데이터 베이스로 보내 회원 가입을 진행하는 메서드
		int result = -1;
		Connection conn = null;
		PreparedStatement psmt = null;
		String sql = "INSERT INTO members VALUES(?,?,?,?,?,?)";
		
		try {
			conn = getConnection();
			psmt = conn.prepareStatement(sql);
			
			psmt.setString(1, mto.getName());
			psmt.setString(2, mto.getUserid());
			psmt.setString(3, mto.getUserpw());
			psmt.setString(4, mto.getEmail());
			psmt.setString(5, mto.getPhone());
			psmt.setInt(6, mto.getAdmin());
			
			result = psmt.executeUpdate();
			
		}catch(Exception e) {
			
		}finally {
			try {
				if(psmt!=null) {psmt.close();}
				if(conn!=null) {conn.close();}
			}catch(Exception e) {
				
			}
		}
		
		
		
		return result;
	}

	public int confirmID(String userid) {
		// idCheckServlet 아이디 중복을 확인하기 위한 메서드
		// 중복은 1, 중복이 아니면 -1
		int result = -1;
		
		String sql = "SELECT userid FROM members WHERE userid=?";
		
		Connection conn = null;
		PreparedStatement psmt = null;
		ResultSet rs = null;
		
		try {
			conn = dao.getConnection();
			psmt = conn.prepareStatement(sql);
			
			psmt.setString(1, userid);
			
			rs = psmt.executeQuery();
			
			if(rs.next()) {
				result = 1; // 아이디가 존재 => 아이디 중복
			}else {
				result = -1; // 아이디가 존재하지 않음 => 아이디 사용 가능
			}
			
		}catch(Exception e) {
			
		}finally {
			try {
				if(rs!=null) {rs.close();}
				if(psmt!=null) {psmt.close();}
				if(conn!=null) {conn.close();}
			}catch(Exception e) {
				
			}
		}
		
		
		
		return result;
	}

	public void updateMember(MemberDto mto) {
		String sql = "UPDATE members SET userpw=?,email=?,phone=?,admin=? WHERE userid=?";
		
		Connection conn = null;
		PreparedStatement psmt = null;
		
		try {
			conn = getConnection();
			psmt = conn.prepareStatement(sql);
			
			psmt.setString(1,mto.getUserpw() );
			psmt.setString(2,mto.getEmail() );
			psmt.setString(3,mto.getPhone() );
			psmt.setInt(4,mto.getAdmin() );
			psmt.setString(5,mto.getUserid() );
			
			
			psmt.executeUpdate();
			
		}catch(Exception e) {
			
		}finally {
			try {
				if(psmt!=null) {psmt.close();}
				if(conn!=null) {conn.close();}
			}catch(Exception e) {
				
			}
		}
		
	}
	
	
	
	
	
	
	
	
}
